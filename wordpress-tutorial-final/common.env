#!/bin/bash

####################################################################################################################################
# DON'T EDIT THIS FILE, it will be replaced with @common file on bundleApp.sh                                                      #
####################################################################################################################################

# system
export PWD=$(pwd)
# c3
export C3_USERNAME="c3"
export C3_PASSWORD="root"
export C3_DOMAIN="c3edu.online"
export C3_DOCKER_BASE_PATH="/srv/docker/thirdparty"
export C3_DOCKER_APP_PATH="${C3_DOCKER_BASE_PATH}/${APP_NAME}"
export C3_PACKAGE_BASE_DATA_PATH="/var/lib/c3apps"
export C3_PACKAGE_BASE_BUNDLE_PATH="/data/syncthing/data"
export C3_PACKAGE_EXTRACT_TARGET_DIRS=( "${C3_DOCKER_BASE_PATH}" "${C3_PACKAGE_BASE_DATA_PATH}" )
export C3_PACKAGE_DATA_FILENAME="data.json"
export C3_PACKAGE_DATA_FILEPATH="${C3_PACKAGE_BASE_DATA_PATH}/${SYNCTHING_APP_DIR}/${C3_PACKAGE_DATA_FILENAME}"
export C3_APACHE_SITES_AVAILABLE="/etc/apache2/sites-available"
export C3_APACHE_SITES_ENABLED="/etc/apache2/sites-enabled"
export C3_MONIT_CONF_ENABLED_PATH="/etc/monit/conf-enabled"
export C3_MONIT_CONF_AVAILABLE_PATH="/etc/monit/conf-available"
# app
export PACKAGE_BASE_PREFIX="c3app"
export PACKAGE_BASE_FILENAME_EXTENSION="c3app"
# target /
export C3_PACKAGE_EXTRACT_DIRS=( "etc" "srv" )
# target /var/lib/c3apps/${folderid} default package extract files, added to data.json has array
export C3_PACKAGE_EXTRACT_FILES=( "VERSION" "enable.sh" "disable.sh" "install.sh" "uninstall.sh" "app.env" "common.env" "data.json")
# state
# export SERVICE_STATE_FILE="${C3_PACKAGE_BASE_DATA_PATH}/${SYNCTHING_APP_DIR}/service.status"
export SERVICE_STATE_ENABLED="ENABLED"
export SERVICE_STATE_DISABLED="DISABLED"
export SERVICE_STATE_INSTALLING="INSTALLING"
export SERVICE_STATE_ENABLING="ENABLING"
export SERVICE_STATE_DISABLING="DISABLING"
if [ -f "${C3_PACKAGE_DATA_FILEPATH}" ]; then
  export SERVICE_STATE=$(cat ${C3_PACKAGE_DATA_FILEPATH} | jq -r ".state")
else 
  export SERVICE_STATE=${SERVICE_STATE_DISABLED}
fi
# script
export SCRIPT_INSTALL_FILE_NAME=install.sh
export SCRIPT_UNINSTALL_FILE_NAME=uninstall.sh
# dns
export SAMBA_ADD_DNS_ACTION="add"
export SAMBA_DELETE_DNS_ACTION="delete"
# samba commands
export SAMBA_ADD_DNS="samba-tool dns ${SAMBA_ADD_DNS_ACTION} 127.0.0.1 ${C3_DOMAIN} ${APP_DOMAIN} CNAME ${C3_DOMAIN} -U ${C3_USERNAME} --password=${C3_PASSWORD}"
export SAMBA_DELETE_DNS="samba-tool dns ${SAMBA_DELETE_DNS_ACTION} 127.0.0.1 ${C3_DOMAIN} ${APP_DOMAIN} CNAME ${C3_DOMAIN} -U ${C3_USERNAME} --password=${C3_PASSWORD}"
# apache commands
export APACHE_RELOAD_SERVICE="service apache2 reload"
export APACHE_ENABLE_HTTP="ln -s ../sites-available/c3app-${APP_NAME}.conf"
export APACHE_ENABLE_HTTPS="ln -s ../sites-available/c3app-${APP_NAME}.com-le-ssl.conf"
export APACHE_DISABLE_HTTP="rm ${C3_APACHE_SITES_ENABLED}/c3app-${APP_NAME}.conf"
export APACHE_DISABLE_HTTPS="rm ${C3_APACHE_SITES_ENABLED}/c3app-${APP_NAME}.com-le-ssl.conf"
# docker commands
export DOCKER_UP="docker-compose up -d"
export DOCKER_DOWN="docker-compose down"
export DOCKER_NETWORK="${PACKAGE_BASE_PREFIX}-${APP_NAME}-network"
export DOCKER_CHECK_NETWORK="docker network ls -q -f name=${DOCKER_NETWORK}"
export DOCKER_CREATE_NETWORK="docker network create ${DOCKER_NETWORK}"
export DOCKER_REMOVE_NETWORK="docker network remove ${DOCKER_NETWORK}"
export DOCKER_TEAR_DOWN="docker-compose down --rmi all --volumes"
# monit
export MONIT_SERVICE_PREFIX="c3app"
export MONIT_CREATE_SYM_LINK="ln -s ${C3_MONIT_CONF_AVAILABLE_PATH}/host-${MONIT_SERVICE_PREFIX}-${APP_NAME} ${C3_MONIT_CONF_ENABLED_PATH}/host-${MONIT_SERVICE_PREFIX}-${APP_NAME}"
export MONIT_REMOVE_SYM_LINK="rm ${C3_MONIT_CONF_ENABLED_PATH}/host-${MONIT_SERVICE_PREFIX}-${APP_NAME}"
export MONIT_SERVICE_MONITOR="monit monitor ${MONIT_SERVICE_PREFIX}-${APP_NAME}"
export MONIT_SERVICE_UNMONITOR="monit unmonitor ${MONIT_SERVICE_PREFIX}-${APP_NAME}"
export MONIT_SERVICE_STATE="monit status ${MONIT_SERVICE_PREFIX}-${APP_NAME}"
export MONIT_SERVICE_RELOAD="service monit reload"
# sleep
export SLEEP_TIME=2

# functions
validate_syncthing_data() {
  if [ -z $1 ]
  then
    echo "This script require a valid syncthing data dir ex '${0} 3456afe'"
    exit 1
  fi
}
export -f validate_syncthing_data
# root protection
validate_root_user() {
  [[ $EUID -ne 0 ]] && echo "This script must be run as root." && exit 1
}
export -f validate_root_user

# error handling
error_exit()
{
	echo "$1" 1>&2
	exit 1
}
export -f error_exit
